@page "/users/{pageIndex:int?}"
@using RealTimeChatSignalRLab.ChatController;
@model RealTimeChatSignalRLab.Pages.Chat.UserChatModel
@{
    ViewData["Title"] = "Users";
}
<h4>Users Chat</h4>
@Html.AntiForgeryToken()

<form class="d-flex flex-row" asp-page="/Chat/UserChat" asp-page-handler="NewChat" method="post">
    <div class="w-auto mt-1 mx-3">Email: </div>
    <input class="form-control w-auto" name="email" type="email" required />
    <input class="form-control btn-primary w-auto mx-3" type="submit" value="New Chat" />
</form>

<ul id="group-list" class="list-group mt-3">
    @foreach (var user in Model.Users)
    {
        <li id="@user.Item1.Id" class="list-group-item d-flex justify-content-between">
            @if (user.Item2 != null)
            {
                var vietnamTimeZone = TimeZoneInfo.FindSystemTimeZoneById("SE Asia Standard Time");
                var dateTime = new DateTime(user.Item2.SendTime);
                var vietnamDateTime = TimeZoneInfo.ConvertTimeFromUtc(dateTime, vietnamTimeZone);
                var isChecked = UserHandler.GetConnection(user.Item1.Id.ToString()).Count > 0 ? "checked" : "";
                <div class="d-flex">
                    <input type="radio" disabled="disabled" @isChecked />
                    <a class="btn" href="/users/@user.Item1.Id/chat">@(user.Item1.Fullname):</a>
                    <div class="btn">@user.Item2.Content</div>
                </div>
                <div class="d-flex align-content-end">
                    <div class="btn">@(vietnamDateTime.ToString("HH:mm:ss dd/MM/yyyy"))</div>
                    <input type="radio" disabled="disabled" @(user.Item3 ? "checked" : "") />
                </div>
            }
            else
            {
                <div class="d-flex">
                    <input type="radio" disabled="disabled" checked />
                    <a class="btn" href="/users/@user.Item1.Id/chat">@(user.Item1.Fullname):</a>
                </div>
                <input type="radio" disabled="disabled" @(user.Item3 ? "checked" : "") />
            }
        </li>
    }
</ul>

<div class="btn btn-primary mt-3" onclick="viewmore()">View More</div>

<script>
    connection.start().catch(function (err) {
        console.error(err.toString())
    });

    connection.on("UserRecieveMessage", function (message, sender) {
        console.log(message, sender);
        pushMessage(message, sender, true, true);
    });

    connection.on("UserSendMessage", function (message, reciever) {
        console.log(message, reciever);
        pushMessage(message, reciever, false, true);
    });

    connection.on("UserOnline", function (id) {
        let elm = document.getElementById(`${id}`);
        if (elm) {
            let inputElm = elm.querySelector(`div:nth-child(1) > input`);
            inputElm.setAttribute('checked', '');
        }
    });

    connection.on("UserOffline", function (id) {
        let elm = document.getElementById(`${id}`);
        if (elm) {
            let inputElm = elm.querySelector(`div:nth-child(1) > input`);
            inputElm.removeAttribute('checked');
        }
    });

    connection.on("SeenUserMessage", function (senderId) {
        let li = document.getElementById(senderId.toString());
        if (li) {
            let input = li.getElementsByTagName('input')[0];
            input.removeAttribute('checked');
        }
    });

    function pushMessage(message, user, isRecieved, toTheTop) {
        let li = document.createElement('li');
        li.classList.add('list-group-item', 'd-flex', 'justify-content-between');
        li.setAttribute('id', user.id.toString());

        let input1 = document.createElement('input');
        input1.setAttribute('type', 'radio');
        input1.setAttribute('disabled', 'disabled');
        input1.setAttribute('checked', 'checked');

        let a = document.createElement('a');
        a.classList.add('btn');
        a.setAttribute('href', `/users/${user.id}/chat`);
        a.textContent = `${user.fullname}: `;

        let div1 = document.createElement('div');
        div1.classList.add('btn');
        div1.textContent = message.content;

        let input2 = document.createElement('input');
        input2.setAttribute('type', 'radio');
        input2.setAttribute('disabled', 'disabled');
        if (isRecieved) {
            input2.setAttribute('checked', 'checked');
        }

        const date = new Date(message.sendTime / 10000 - 62135596800000);
        let div2 = document.createElement('div');
        div2.classList.add('btn');
        div2.textContent = date.toLocaleString('vi-VN', options);

        let containerDiv1 = document.createElement('div');
        containerDiv1.classList.add('d-flex');
        containerDiv1.appendChild(input1);
        containerDiv1.appendChild(a);
        containerDiv1.appendChild(div1);

        let containerDiv2 = document.createElement('div');
        containerDiv2.classList.add('d-flex', 'align-content-end');
        containerDiv2.appendChild(div2);
        containerDiv2.appendChild(input2);

        li.appendChild(containerDiv1);
        li.appendChild(containerDiv2);

        let container = document.getElementById('group-list');
        let existedLi = document.getElementById(user.id);
        if (existedLi) {
            container.removeChild(existedLi);
        }
        if (toTheTop) {
            container.insertBefore(li, container.firstChild);
            return;
        }
        container.appendChild(li);
    }

    let offsetTime = @Model.Users.Min(mess => mess?.Item2?.SendTime ?? 0);
    function viewmore() {
        if (offsetTime && offsetTime > 0) {
            const url = '@Url.Page("/Chat/UserChat")';
            const data = `offsetTime=${offsetTime}`;
            send(url, data, ajaxCallBack);
        }
    }

    function ajaxCallBack(data) {
        var jsonData = JSON.parse(data);
        console.log(jsonData);
        if (jsonData.length > 0) {
            offsetTime = jsonData.reduce((min, user) => {
                if (user.item2) {
                    return user.item2.sendTime < min ? user.item2.sendTime : min
                }
                return min;
            }, offsetTime);
            jsonData.forEach(function (user) {
                pushMessage(user.item2, user.item1, user.item3, false);
            });
        }
    }
</script>