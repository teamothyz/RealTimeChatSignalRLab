@page "/users/{id:Guid}/chat"
@model RealTimeChatSignalRLab.Pages.Chat.UserChatMessagesModel
@{
    ViewData["Title"] = "User Chat";
}
<h4>@Model.Participant?.Fullname</h4>
@Html.AntiForgeryToken()

<div class="btn btn-primary mt-3" onclick="viewmore()">View More</div>

<ul id="message-user-list" class="list-group mt-3">
    @foreach (var message in Model.Messages.OrderBy(x => x.Item2.SendTime))
    {
        var vietnamTimeZone = TimeZoneInfo.FindSystemTimeZoneById("SE Asia Standard Time");
        var dateTime = new DateTime(message.Item2.SendTime);
        var vietnamDateTime = TimeZoneInfo.ConvertTimeFromUtc(dateTime, vietnamTimeZone);

        <li class="list-group-item">
            <div class="btn float-start">@message.Item1.Fullname</div>
            <div class="btn float-start">@message.Item2.Content</div>
            <div class="btn float-end">@(vietnamDateTime.ToString("HH:mm:ss dd/MM/yyyy"))</div>
        </li>
    }
</ul>

<div>
    <textarea id="message-content" class="form-control" rows="5"></textarea>
    <div id="send-btn" class="btn btn-primary mt-2">Send</div>
</div>

<script>
    connection.start().then(function () {
        connection.invoke("SeenUserMessage", '@Model.Id').catch(function (err) {
            return console.error(err.toString());
        });
    }).catch(function (err) {
        console.error(err.toString())
    });

    connection.on("UserSendMessage", function (message, user) {
        pushNewMessage(message, user, true);
    });

    connection.on("UserRecieveMessage", function (message, user) {
        pushNewMessage(message, user, true);
        seenMessage();
    });

    function pushNewMessage(message, user, toTheEnd) {
        let li = document.createElement('li');
        li.classList.add('list-group-item');

        let div1 = document.createElement('div');
        div1.classList.add('btn', 'float-start');
        div1.textContent = user.fullname;

        let div2 = document.createElement('div');
        div2.classList.add('btn', 'float-start');
        div2.textContent = message.content;

        const date = new Date(message.sendTime / 10000 - 62135596800000);
        let div3 = document.createElement('div');
        div3.classList.add('btn', 'float-end');
        div3.textContent = date.toLocaleString('vi-VN', options);

        li.appendChild(div1);
        li.appendChild(div2);
        li.appendChild(div3);

        let container = document.getElementById('message-user-list');
        if (toTheEnd) {
            container.appendChild(li);
            return;
        }
        container.insertBefore(li, container.firstChild);
    }

    document.getElementById("send-btn").addEventListener("click", function (event) {
        const messageElm = document.getElementById("message-content");
        const message = messageElm.value;
        if (message.trim().length == 0) {
            return;
        }
        messageElm.value = '';
        connection.invoke("SendMessageToUser", '@Model.Id', message).catch(function (err) {
            return console.error(err.toString());
        });
        event.preventDefault();
    });

    function seenMessage() {
        connection.invoke("SeenUserMessage", '@Model.Id').catch(function (err) {
            return console.error(err.toString());
        });
    }

    let pageIndex = 2;
    const offsetTime = @(Model.Messages.Max(mess => mess.Item2?.SendTime) ?? 0);
    function viewmore() {
        const url = '@Url.Page("/Chat/UserChatMessages", new {Id = Model.Id})';
        let data = `index=${pageIndex}`;
        if (offsetTime && offsetTime > 0) {
            data += `&offsetTime=${offsetTime}`;
        }
        send(url, data, ajaxCallBack);
    }

    function ajaxCallBack(data) {
        var jsonData = JSON.parse(data);
        console.log(jsonData);
        if (jsonData.length > 0) {
            pageIndex++;
            jsonData.forEach(function (message) {
                pushNewMessage(message.item2, message.item1, false);
            });
        }
    }
</script>